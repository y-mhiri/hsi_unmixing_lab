[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "remote-sensing-lab"
version = "1.0.0"
description = "Hyperspectral Unmixing Optimization Lab"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Yassine Mhiri", email = "yassine.mhiri@univ-smb.fr"}
]
maintainers = [
    {name = "Yassine Mhiri", email = "yassine.mhiri@univ-smb.fr"}
]
keywords = ["hyperspectral", "unmixing", "optimization", "remote-sensing", "education"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Education",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "scikit-image>=0.19.0",
    "pandas>=1.3.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "jupyter>=1.0.0",
    "notebook>=6.4.0",
    "ipywidgets>=7.6.0",
    "jupyterlab>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.9",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
]

advanced = [
    "plotly>=5.0.0",
    "bokeh>=2.4.0",
    "tensorboard>=2.7.0",
    "numba>=0.56.0",
]
all = [
    "remote-sensing-lab[dev,notebooks,advanced]",
]

[project.scripts]
run-lab = "src.main:main"
benchmark-lab = "examples.performance_benchmark:main"

[project.urls]
Homepage = "https://github.com/yourusername/remote-sensing-lab"
Documentation = "https://github.com/yourusername/remote-sensing-lab/tree/main/docs"
Repository = "https://github.com/yourusername/remote-sensing-lab"
Issues = "https://github.com/yourusername/remote-sensing-lab/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".env"
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

# Coverage
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]